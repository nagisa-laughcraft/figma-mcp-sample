# GitHub操作に関するルール
- GitHub関連の操作はすべてMCPクライアントを使用すること
- リポジトリ情報:
  - owner: nagisa-laughcraft
  - repository: figma-mcp-sample
- ブランチ操作:
  - 新機能追加時は `feat/` プレフィックスを使用
  - バグ修正時は `fix/` プレフィックスを使用
  - ドキュメント更新時は `docs/` プレフィックスを使用
- プルリクエスト:
  - タイトルは日本語で具体的な変更内容を記述
  - 変更内容の説明を必ず含める

# 品質確認手順
- 機能追加・変更時は以下の手順で品質確認を行うこと:
  1. 型チェックの実行:
    - `npm run typecheck` で型エラーがないことを確認
  2. リンター確認:
    - `npm run lint` でコーディング規約違反がないことを確認
  3. ユニットテストの実行:
    - `npm run test` でテストが全て成功することを確認
  4. E2Eテストの実行:
    - `npm run test:e2e` でPlaywrightのE2Eテストが全て成功することを確認
  5. 動作確認:
    - `npm run dev` で開発サーバーを起動
    - Playwrightを使用して主要な機能の動作確認を実施
  6. ビルド確認:
    - `npm run build` でビルドエラーがないことを確認

# 一般的なコーディングルール
- コードコメントは日本語で記述すること
- 実装の説明は日本語で行うこと

# Next.jsに関するルール
- ドキュメント検索やブラウザ操作には Playwright/MCPを優先的に使用すること
- App Routerを使用すること（Pages Routerは使用しない）
- Server Componentsを基本とし、必要な場合のみClient Componentsを使用すること
- データフェッチングは Server Components での async/await を優先的に使用すること
- スタイリングには CSS Modules または Tailwind CSS を使用すること
- 画像最適化には next/image を使用すること
- リンクには next/link を使用すること
- メタデータの設定には Metadata API を使用すること
- TypeScriptを使用し、適切な型定義を行うこと
- パフォーマンス最適化のため、必要に応じて以下を実施すること:
  - コンポーネントの適切な分割
  - 動的インポートの活用
  - キャッシュの適切な設定

# プロジェクト固有の設定
- 使用技術:
  - TypeScript: 厳格な型チェックを有効化
  - Tailwind CSS: 共通のデザインシステムを使用
  - ESLint: コード品質の維持
- ディレクトリ構造:
  - src/
    - app/: ルーティングとページコンポーネント
    - components/: 再利用可能なコンポーネント
    - lib/: ユーティリティ関数とヘルパー
    - types/: TypeScript型定義
    - styles/: グローバルスタイルとTailwind設定
- 命名規則:
  - コンポーネント: PascalCase
  - 関数: camelCase
  - 定数: SNAKE_CASE
  - ファイル名: コンポーネントと同じ名前（PascalCase）
- テスト:
  - ユニットテスト: Vitest
  - E2Eテスト: Playwright